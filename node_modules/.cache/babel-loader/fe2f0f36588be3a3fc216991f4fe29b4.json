{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ESRAA\\\\loginn\\\\src\\\\pages\\\\CSSNavPage.js\",\n    _this = this;\n\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction validateEmail(value) {\n  var error;\n\n  if (!value) {\n    error = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n\n  return error;\n}\n\nfunction validateUsername(value) {\n  var error;\n\n  if (value === 'admin') {\n    error = 'Nice try!';\n  }\n\n  return error;\n}\n\nexport var CSSNavPage = function CSSNavPage() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: '',\n        email: ''\n      },\n      onSubmit: function onSubmit(values) {\n        // same shape as initial values\n        console.log(values);\n      },\n      children: function children(_ref) {\n        var errors = _ref.errors,\n            touched = _ref.touched,\n            validateField = _ref.validateField,\n            validateForm = _ref.validateForm;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"email\",\n            validate: validateEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, _this), errors.email && touched.email && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 45\n          }, _this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"username\",\n            validate: validateUsername\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 11\n          }, _this), errors.username && touched.username && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: errors.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 51\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: function onClick() {\n              return validateField('username');\n            },\n            children: \"Check Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: function onClick() {\n              return validateForm().then(function () {\n                return console.log('blah');\n              });\n            },\n            children: \"Validate All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, _this);\n};\n_c = CSSNavPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CSSNavPage\");","map":{"version":3,"sources":["C:/Users/ESRAA/loginn/src/pages/CSSNavPage.js"],"names":["React","Formik","Form","Field","validateEmail","value","error","test","validateUsername","CSSNavPage","username","email","values","console","log","errors","touched","validateField","validateForm","then"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,QAApC;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,KAAJ;;AACA,MAAI,CAACD,KAAL,EAAY;AACVC,IAAAA,KAAK,GAAG,UAAR;AACD,GAFD,MAEO,IAAI,CAAC,4CAA4CC,IAA5C,CAAiDF,KAAjD,CAAL,EAA8D;AACnEC,IAAAA,KAAK,GAAG,uBAAR;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,SAASE,gBAAT,CAA0BH,KAA1B,EAAiC;AAC/B,MAAIC,KAAJ;;AACA,MAAID,KAAK,KAAK,OAAd,EAAuB;AACrBC,IAAAA,KAAK,GAAG,WAAR;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,OAAO,IAAMG,UAAU,GAAE,SAAZA,UAAY;AAAA,sBACvB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AACbC,QAAAA,QAAQ,EAAE,EADG;AAEbC,QAAAA,KAAK,EAAE;AAFM,OADjB;AAKE,MAAA,QAAQ,EAAE,kBAAAC,MAAM,EAAI;AAClB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,OARH;AAAA,gBAUG;AAAA,YAAGG,MAAH,QAAGA,MAAH;AAAA,YAAWC,OAAX,QAAWA,OAAX;AAAA,YAAoBC,aAApB,QAAoBA,aAApB;AAAA,YAAmCC,YAAnC,QAAmCA,YAAnC;AAAA,4BACC,QAAC,IAAD;AAAA,kCACE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,QAAQ,EAAEd;AAA9B;AAAA;AAAA;AAAA;AAAA,mBADF,EAEGW,MAAM,CAACJ,KAAP,IAAgBK,OAAO,CAACL,KAAxB,iBAAiC;AAAA,sBAAMI,MAAM,CAACJ;AAAb;AAAA;AAAA;AAAA;AAAA,mBAFpC,eAIE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAuB,YAAA,QAAQ,EAAEH;AAAjC;AAAA;AAAA;AAAA;AAAA,mBAJF,EAKGO,MAAM,CAACL,QAAP,IAAmBM,OAAO,CAACN,QAA3B,iBAAuC;AAAA,sBAAMK,MAAM,CAACL;AAAb;AAAA;AAAA;AAAA;AAAA,mBAL1C,eAQE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,OAAO,EAAE;AAAA,qBAAMO,aAAa,CAAC,UAAD,CAAnB;AAAA,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARF,eAaE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMC,YAAY,GAAGC,IAAf,CAAoB;AAAA,uBAAMN,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAN;AAAA,eAApB,CAAN;AAAA,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAbF,eAmBE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD;AAAA;AAVH;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADuB;AAAA,CAAlB;KAAML,U","sourcesContent":["import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\n\r\nfunction validateEmail(value) {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Required';\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = 'Invalid email address';\r\n  }\r\n  return error;\r\n}\r\n\r\nfunction validateUsername(value) {\r\n  let error;\r\n  if (value === 'admin') {\r\n    error = 'Nice try!';\r\n  }\r\n  return error;\r\n}\r\n\r\nexport const CSSNavPage= () => (\r\n  <div>\r\n    <h1>Signup</h1>\r\n    <Formik\r\n      initialValues={{\r\n        username: '',\r\n        email: '',\r\n      }}\r\n      onSubmit={values => {\r\n        // same shape as initial values\r\n        console.log(values);\r\n      }}\r\n    >\r\n      {({ errors, touched, validateField, validateForm }) => (\r\n        <Form>\r\n          <Field name=\"email\" validate={validateEmail} />\r\n          {errors.email && touched.email && <div>{errors.email}</div>}\r\n\r\n          <Field name=\"username\" validate={validateUsername} />\r\n          {errors.username && touched.username && <div>{errors.username}</div>}\r\n          {/** Trigger field-level validation\r\n           imperatively */}\r\n          <button type=\"button\" onClick={() => validateField('username')}>\r\n            Check Username\r\n          </button>\r\n          {/** Trigger form-level validation\r\n           imperatively */}\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => validateForm().then(() => console.log('blah'))}\r\n          >\r\n            Validate All\r\n          </button>\r\n          <button type=\"submit\">Submit</button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n);"]},"metadata":{},"sourceType":"module"}